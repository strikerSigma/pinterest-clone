// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id              String    @id @default(auto()) @map("_id") @db.ObjectId
  name            String?
  username        String?   @unique
  bio             String?
  role            Role?     @default(BASIC)
  email           String?   @unique
  emailVerified   DateTime?
  image           String?
  profileImage    String?
  coverImage      String?
  hashedPassword  String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  followingIds    String[]  @db.ObjectId
  hasNotification Boolean?

  posts         Pin[]
  comments      Comment[]
  notifications Notification[]
}

model Pin {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  body      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String   @db.ObjectId
  likedIds  String[] @db.ObjectId

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  Comment    Comment[]
  category   category? @relation(fields: [categoryId], references: [id])
  categoryId String?   @db.ObjectId
}

model Comment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  body      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String   @db.ObjectId
  pinId     String   @db.ObjectId

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  post Pin  @relation(fields: [pinId], references: [id], onDelete: Cascade)
}

model Notification {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  body      String
  userId    String   @db.ObjectId
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model category {
  id   String @id @default(auto()) @map("_id") @db.ObjectId
  name String @unique
  pin  Pin[]
}

enum Role {
  ADMIN
  EDITOR
  BASIC
}

///////////////////////
// model User {
//   id              String    @id @default(auto()) @map("_id") @db.ObjectId
//   name            String?
//   username        String?   @unique
//   bio             String?
//   email           String?   @unique
//   emailVerified   DateTime?
//   image           String?
//   profileImage    String?
//   coverImage      String?
//   hashedPassword  String?
//   createdAt       DateTime  @default(now())
//   updatedAt       DateTime  @updatedAt
//   followingIds    String[]  @db.ObjectId
//   hasNotification Boolean?

//   posts         Post[]
//   comments      Comment[]
//   notifications Notification[]
// }

// model Post {
//   id        String   @id @default(auto()) @map("_id") @db.ObjectId
//   body      String
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
//   userId    String   @db.ObjectId
//   likedIds  String[] @db.ObjectId

//   user User @relation(fields: [userId], references: [id], onDelete: Cascade)

//   Comment Comment[]
// }

// model Comment {
//   id        String   @id @default(auto()) @map("_id") @db.ObjectId
//   body      String
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
//   userId    String   @db.ObjectId
//   postId    String   @db.ObjectId

//   user User @relation(fields: [userId], references: [id], onDelete: Cascade)
//   post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
// }

// model Notification {
//   id        String   @id @default(auto()) @map("_id") @db.ObjectId
//   body      String
//   userId    String   @db.ObjectId
//   createdAt DateTime @default(now())

//   user User @relation(fields: [userId], references: [id], onDelete: Cascade)
// }
